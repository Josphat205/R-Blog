{"version":3,"names":["re$3","exports","SEMVER_SPEC_VERSION","MAX_LENGTH$2","MAX_SAFE_INTEGER$1","Number","MAX_SAFE_INTEGER","MAX_SAFE_COMPONENT_LENGTH","constants","MAX_LENGTH","debug$1","process","env","NODE_DEBUG","test","args","console","error","debug_1","module","debug","re","src","t","R","createToken","name","value","isGlobal","index","RegExp","undefined","NUMERICIDENTIFIER","NUMERICIDENTIFIERLOOSE","NONNUMERICIDENTIFIER","PRERELEASEIDENTIFIER","PRERELEASEIDENTIFIERLOOSE","BUILDIDENTIFIER","MAINVERSION","PRERELEASE","BUILD","FULLPLAIN","MAINVERSIONLOOSE","PRERELEASELOOSE","LOOSEPLAIN","XRANGEIDENTIFIER","XRANGEIDENTIFIERLOOSE","GTLT","XRANGEPLAIN","XRANGEPLAINLOOSE","COERCE","LONETILDE","tildeTrimReplace","LONECARET","caretTrimReplace","comparatorTrimReplace","opts","parseOptions$2","options","loose","filter","k","reduce","o","parseOptions_1","numeric","compareIdentifiers$1","a","b","anum","bnum","rcompareIdentifiers","identifiers","compareIdentifiers","MAX_LENGTH$1","re$2","t$2","parseOptions$1","SemVer$c","constructor","version","includePrerelease","TypeError","length","m","trim","match","LOOSE","FULL","raw","major","minor","patch","prerelease","split","map","id","num","build","format","join","toString","compare","other","compareMain","comparePre","i","compareBuild","inc","release","identifier","push","isNaN","Error","semver$2","re$1","t$1","SemVer$b","parseOptions","parse$5","r","er","parse_1","parse$4","valid$1","v","valid_1","parse$3","clean","s","replace","clean_1","SemVer$a","inc_1","SemVer$9","compare$a","compare_1","compare$9","eq$2","eq_1","parse$2","eq$1","diff","version1","version2","v1","v2","hasPre","prefix","defaultResult","key","diff_1","SemVer$8","major_1","SemVer$7","minor_1","SemVer$6","patch_1","parse$1","parsed","prerelease_1","compare$8","rcompare","rcompare_1","compare$7","compareLoose","compareLoose_1","SemVer$5","compareBuild$2","versionA","versionB","compareBuild_1","compareBuild$1","sort","list","sort_1","rsort","rsort_1","compare$6","gt$3","gt_1","compare$5","lt$2","lt_1","compare$4","neq$1","neq_1","compare$3","gte$2","gte_1","compare$2","lte$2","lte_1","eq","neq","gt$2","gte$1","lt$1","lte$1","cmp","op","cmp_1","SemVer$4","parse","coerce","String","rtl","next","COERCERTL","exec","lastIndex","coerce_1","iterator","hasRequiredIterator","requireIterator","Yallist","prototype","Symbol","walker","head","yallist","hasRequiredYallist","requireYallist","Node","create","self","tail","forEach","item","arguments","l","removeNode","node","prev","unshiftNode","pushNode","unshift","pop","res","shift","fn","thisp","call","forEachReverse","get","n","getReverse","mapReverse","initial","acc","reduceReverse","toArray","arr","Array","toArrayReverse","slice","from","to","ret","sliceReverse","splice","start","deleteCount","nodes","insert","reverse","p","inserted","lruCache","hasRequiredLruCache","requireLruCache","MAX","LENGTH","LENGTH_CALCULATOR","ALLOW_STALE","MAX_AGE","DISPOSE","NO_DISPOSE_ON_SET","LRU_LIST","CACHE","UPDATE_AGE_ON_GET","naiveLength","LRUCache","max","Infinity","lc","stale","maxAge","dispose","noDisposeOnSet","updateAgeOnGet","reset","mL","allowStale","mA","lengthCalculator","lC","hit","itemCount","rforEach","forEachStep","keys","values","Map","dump","isStale","e","now","h","dumpLru","set","Date","len","has","del","Entry","peek","load","expiresAt","prune","doUse","delete","range","hasRequiredRange","requireRange","Range","Comparator","parseRange","c","first","isNullSet","isAny","comps","memoOpts","Object","memoKey","cached","cache","hr","HYPHENRANGELOOSE","HYPHENRANGE","hyphenReplace","COMPARATORTRIM","TILDETRIM","CARETTRIM","rangeList","comp","parseComparator","replaceGTE0","COMPARATORLOOSE","rangeMap","comparators","size","result","intersects","some","thisComparators","isSatisfiable","rangeComparators","every","thisComparator","rangeComparator","SemVer","testSet","LRU","requireComparator","remainingComparators","testComparator","otherComparator","replaceCarets","replaceTildes","replaceXRanges","replaceStars","isX","toLowerCase","replaceTilde","TILDELOOSE","TILDE","_","M","pr","replaceCaret","CARETLOOSE","CARET","z","replaceXRange","XRANGELOOSE","XRANGE","gtlt","xM","xm","xp","anyX","STAR","GTE0PRE","GTE0","incPr","$0","fM","fm","fp","fpr","fb","tM","tm","tp","tpr","tb","semver","ANY","allowed","comparator","hasRequiredComparator","operator","COMPARATOR","sameDirectionIncreasing","sameDirectionDecreasing","sameSemVer","differentDirectionsInclusive","oppositeDirectionsLessThan","oppositeDirectionsGreaterThan","Range$8","satisfies$3","satisfies_1","Range$7","toComparators","toComparators_1","SemVer$3","Range$6","maxSatisfying","versions","maxSV","rangeObj","maxSatisfying_1","SemVer$2","Range$5","minSatisfying","min","minSV","minSatisfying_1","SemVer$1","Range$4","gt$1","minVersion","minver","setMin","compver","minVersion_1","Range$3","validRange","valid","Comparator$1","ANY$1","Range$2","satisfies$2","gt","lt","lte","gte","outside$2","hilo","gtfn","ltefn","ltfn","ecomp","high","low","outside_1","outside$1","gtr","gtr_1","outside","ltr","ltr_1","Range$1","r1","r2","intersects_1","satisfies$1","compare$1","simplify","included","ranges","simplified","original","satisfies","subset","sub","dom","sawNonNull","OUTER","simpleSub","simpleDom","isSub","simpleSubset","eqSet","Set","higherGT","lowerLT","add","gtltComp","higher","lower","hasDomLT","hasDomGT","needDomLTPre","needDomGTPre","subset_1","internalRe","semver$1","tokens","simplifyRange","builtins","experimental","coreModules","reader","read","jsonPath","find","path","dirname","dir","string","fs","readFileSync","toNamespacedPath","code","parent","isWindows","platform","own$1","hasOwnProperty","codes","messages","nodeInternalPrefix","userStackTraceLimit","ERR_INVALID_MODULE_SPECIFIER","createError","request","reason","base","ERR_INVALID_PACKAGE_CONFIG","message","ERR_INVALID_PACKAGE_TARGET","pkgPath","target","isImport","relError","startsWith","assert","JSON","stringify","ERR_MODULE_NOT_FOUND","type","ERR_PACKAGE_IMPORT_NOT_DEFINED","specifier","packagePath","ERR_PACKAGE_PATH_NOT_EXPORTED","subpath","ERR_UNSUPPORTED_DIR_IMPORT","ERR_UNKNOWN_FILE_EXTENSION","ERR_INVALID_ARG_VALUE","inspected","inspect","includes","ERR_UNSUPPORTED_ESM_URL_SCHEME","url","protocol","sym","def","makeNodeErrorWithCode","Base","NodeError","limit","stackTraceLimit","isErrorStackTraceLimitWritable","getMessage","defineProperty","enumerable","writable","configurable","addCodeToName","hideStackFrames","captureLargerStackTrace","stack","desc","getOwnPropertyDescriptor","isExtensible","hidden","stackTraceLimitIsWritable","POSITIVE_INFINITY","captureStackTrace","Reflect","apply","expectedLength","extensionFormatMap","__proto__","defaultGetFormat","URL","mime","pathname","ext","extname","getPackageType","href","fileURLToPath","listOfBuiltins","own","DEFAULT_CONDITIONS","freeze","DEFAULT_CONDITIONS_SET","invalidSegmentRegEx","patternRegEx","encodedSepRegEx","emittedPackageWarnings","packageJsonCache","emitFolderMapDeprecation","pjsonUrl","isExports","pjsonPath","emitWarning","emitLegacyIndexDeprecation","packageJsonUrl","main","basePath","getConditionsSet","conditions","isArray","tryStatSync","statSync","Stats","getPackageConfig","existing","source","packageConfig","exists","imports","packageJson","getPackageScopeConfig","resolved","packageJsonPath","endsWith","lastPackageJsonUrl","fileExists","isFile","legacyMainResolve","guess","tries","finalizeResolution","stats","isDirectory","throwImportNotDefined","throwExportsNotFound","throwInvalidSubpath","internal","throwInvalidPackageTarget","resolvePackageTargetString","pattern","isURL","exportTarget","packageResolve","resolvedPath","isArrayIndex","keyNumber","resolvePackageTarget","packageSubpath","targetList","lastException","targetItem","getOwnPropertyNames","conditionalTarget","isConditionalExportsMainSugar","isConditionalSugar","j","curIsConditionalSugar","packageExportsResolve","exact","bestMatch","packageImportsResolve","pathToFileURL","parsePackageName","separatorIndex","indexOf","validPackageName","isScoped","packageName","lastPath","stat","isRelativeSpecifier","shouldBeTreatedAsRelativeOrAbsolutePath","moduleResolve","defaultResolve","context","parentURL","urlPath","real","realpathSync","old","sep","search","hash","resolve","Promise","reject"],"sources":["../../src/vendor/import-meta-resolve.js"],"sourcesContent":["\n/****************************************************************************\\\n *                         NOTE FROM BABEL AUTHORS                          *\n * This file is inlined from https://github.com/wooorm/import-meta-resolve, *\n * because we need to compile it to CommonJS.                               *\n\\****************************************************************************/\n\n/*\n(The MIT License)\n\nCopyright (c) 2021 Titus Wormer <mailto:tituswormer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n---\n\nThis is a derivative work based on:\n<https://github.com/nodejs/node>.\nWhich is licensed:\n\n\"\"\"\nCopyright Node.js contributors. All rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to\ndeal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or\nsell copies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\nIN THE SOFTWARE.\n\"\"\"\n\nThis license applies to parts of Node.js originating from the\nhttps://github.com/joyent/node repository:\n\n\"\"\"\nCopyright Joyent, Inc. and other Node contributors. All rights reserved.\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to\ndeal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or\nsell copies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\nIN THE SOFTWARE.\n\"\"\"\n*/\n\nimport { URL, fileURLToPath, pathToFileURL } from 'url';\nimport fs, { realpathSync, statSync, Stats } from 'fs';\nimport path from 'path';\nimport assert from 'assert';\nimport { format, inspect } from 'util';\n\nvar re$3 = {exports: {}};\n\n// Note: this is the semver.org version of the spec that it implements\n// Not necessarily the package version of this code.\nconst SEMVER_SPEC_VERSION = '2.0.0';\n\nconst MAX_LENGTH$2 = 256;\nconst MAX_SAFE_INTEGER$1 = Number.MAX_SAFE_INTEGER ||\n/* istanbul ignore next */ 9007199254740991;\n\n// Max safe segment length for coercion.\nconst MAX_SAFE_COMPONENT_LENGTH = 16;\n\nvar constants = {\n  SEMVER_SPEC_VERSION,\n  MAX_LENGTH: MAX_LENGTH$2,\n  MAX_SAFE_INTEGER: MAX_SAFE_INTEGER$1,\n  MAX_SAFE_COMPONENT_LENGTH,\n};\n\nconst debug$1 = (\n  typeof process === 'object' &&\n  process.env &&\n  process.env.NODE_DEBUG &&\n  /\\bsemver\\b/i.test(process.env.NODE_DEBUG)\n) ? (...args) => console.error('SEMVER', ...args)\n  : () => {};\n\nvar debug_1 = debug$1;\n\n(function (module, exports) {\n\tconst { MAX_SAFE_COMPONENT_LENGTH } = constants;\n\tconst debug = debug_1;\n\texports = module.exports = {};\n\n\t// The actual regexps go on exports.re\n\tconst re = exports.re = [];\n\tconst src = exports.src = [];\n\tconst t = exports.t = {};\n\tlet R = 0;\n\n\tconst createToken = (name, value, isGlobal) => {\n\t  const index = R++;\n\t  debug(name, index, value);\n\t  t[name] = index;\n\t  src[index] = value;\n\t  re[index] = new RegExp(value, isGlobal ? 'g' : undefined);\n\t};\n\n\t// The following Regular Expressions can be used for tokenizing,\n\t// validating, and parsing SemVer version strings.\n\n\t// ## Numeric Identifier\n\t// A single `0`, or a non-zero digit followed by zero or more digits.\n\n\tcreateToken('NUMERICIDENTIFIER', '0|[1-9]\\\\d*');\n\tcreateToken('NUMERICIDENTIFIERLOOSE', '[0-9]+');\n\n\t// ## Non-numeric Identifier\n\t// Zero or more digits, followed by a letter or hyphen, and then zero or\n\t// more letters, digits, or hyphens.\n\n\tcreateToken('NONNUMERICIDENTIFIER', '\\\\d*[a-zA-Z-][a-zA-Z0-9-]*');\n\n\t// ## Main Version\n\t// Three dot-separated numeric identifiers.\n\n\tcreateToken('MAINVERSION', `(${src[t.NUMERICIDENTIFIER]})\\\\.` +\n\t                   `(${src[t.NUMERICIDENTIFIER]})\\\\.` +\n\t                   `(${src[t.NUMERICIDENTIFIER]})`);\n\n\tcreateToken('MAINVERSIONLOOSE', `(${src[t.NUMERICIDENTIFIERLOOSE]})\\\\.` +\n\t                        `(${src[t.NUMERICIDENTIFIERLOOSE]})\\\\.` +\n\t                        `(${src[t.NUMERICIDENTIFIERLOOSE]})`);\n\n\t// ## Pre-release Version Identifier\n\t// A numeric identifier, or a non-numeric identifier.\n\n\tcreateToken('PRERELEASEIDENTIFIER', `(?:${src[t.NUMERICIDENTIFIER]\n\t}|${src[t.NONNUMERICIDENTIFIER]})`);\n\n\tcreateToken('PRERELEASEIDENTIFIERLOOSE', `(?:${src[t.NUMERICIDENTIFIERLOOSE]\n\t}|${src[t.NONNUMERICIDENTIFIER]})`);\n\n\t// ## Pre-release Version\n\t// Hyphen, followed by one or more dot-separated pre-release version\n\t// identifiers.\n\n\tcreateToken('PRERELEASE', `(?:-(${src[t.PRERELEASEIDENTIFIER]\n\t}(?:\\\\.${src[t.PRERELEASEIDENTIFIER]})*))`);\n\n\tcreateToken('PRERELEASELOOSE', `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]\n\t}(?:\\\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`);\n\n\t// ## Build Metadata Identifier\n\t// Any combination of digits, letters, or hyphens.\n\n\tcreateToken('BUILDIDENTIFIER', '[0-9A-Za-z-]+');\n\n\t// ## Build Metadata\n\t// Plus sign, followed by one or more period-separated build metadata\n\t// identifiers.\n\n\tcreateToken('BUILD', `(?:\\\\+(${src[t.BUILDIDENTIFIER]\n\t}(?:\\\\.${src[t.BUILDIDENTIFIER]})*))`);\n\n\t// ## Full Version String\n\t// A main version, followed optionally by a pre-release version and\n\t// build metadata.\n\n\t// Note that the only major, minor, patch, and pre-release sections of\n\t// the version string are capturing groups.  The build metadata is not a\n\t// capturing group, because it should not ever be used in version\n\t// comparison.\n\n\tcreateToken('FULLPLAIN', `v?${src[t.MAINVERSION]\n\t}${src[t.PRERELEASE]}?${\n\t  src[t.BUILD]}?`);\n\n\tcreateToken('FULL', `^${src[t.FULLPLAIN]}$`);\n\n\t// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.\n\t// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty\n\t// common in the npm registry.\n\tcreateToken('LOOSEPLAIN', `[v=\\\\s]*${src[t.MAINVERSIONLOOSE]\n\t}${src[t.PRERELEASELOOSE]}?${\n\t  src[t.BUILD]}?`);\n\n\tcreateToken('LOOSE', `^${src[t.LOOSEPLAIN]}$`);\n\n\tcreateToken('GTLT', '((?:<|>)?=?)');\n\n\t// Something like \"2.*\" or \"1.2.x\".\n\t// Note that \"x.x\" is a valid xRange identifer, meaning \"any version\"\n\t// Only the first item is strictly required.\n\tcreateToken('XRANGEIDENTIFIERLOOSE', `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\\\*`);\n\tcreateToken('XRANGEIDENTIFIER', `${src[t.NUMERICIDENTIFIER]}|x|X|\\\\*`);\n\n\tcreateToken('XRANGEPLAIN', `[v=\\\\s]*(${src[t.XRANGEIDENTIFIER]})` +\n\t                   `(?:\\\\.(${src[t.XRANGEIDENTIFIER]})` +\n\t                   `(?:\\\\.(${src[t.XRANGEIDENTIFIER]})` +\n\t                   `(?:${src[t.PRERELEASE]})?${\n\t                     src[t.BUILD]}?` +\n\t                   `)?)?`);\n\n\tcreateToken('XRANGEPLAINLOOSE', `[v=\\\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})` +\n\t                        `(?:\\\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +\n\t                        `(?:\\\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +\n\t                        `(?:${src[t.PRERELEASELOOSE]})?${\n\t                          src[t.BUILD]}?` +\n\t                        `)?)?`);\n\n\tcreateToken('XRANGE', `^${src[t.GTLT]}\\\\s*${src[t.XRANGEPLAIN]}$`);\n\tcreateToken('XRANGELOOSE', `^${src[t.GTLT]}\\\\s*${src[t.XRANGEPLAINLOOSE]}$`);\n\n\t// Coercion.\n\t// Extract anything that could conceivably be a part of a valid semver\n\tcreateToken('COERCE', `${'(^|[^\\\\d])' +\n\t              '(\\\\d{1,'}${MAX_SAFE_COMPONENT_LENGTH}})` +\n\t              `(?:\\\\.(\\\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` +\n\t              `(?:\\\\.(\\\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` +\n\t              `(?:$|[^\\\\d])`);\n\tcreateToken('COERCERTL', src[t.COERCE], true);\n\n\t// Tilde ranges.\n\t// Meaning is \"reasonably at or greater than\"\n\tcreateToken('LONETILDE', '(?:~>?)');\n\n\tcreateToken('TILDETRIM', `(\\\\s*)${src[t.LONETILDE]}\\\\s+`, true);\n\texports.tildeTrimReplace = '$1~';\n\n\tcreateToken('TILDE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`);\n\tcreateToken('TILDELOOSE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`);\n\n\t// Caret ranges.\n\t// Meaning is \"at least and backwards compatible with\"\n\tcreateToken('LONECARET', '(?:\\\\^)');\n\n\tcreateToken('CARETTRIM', `(\\\\s*)${src[t.LONECARET]}\\\\s+`, true);\n\texports.caretTrimReplace = '$1^';\n\n\tcreateToken('CARET', `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`);\n\tcreateToken('CARETLOOSE', `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`);\n\n\t// A simple gt/lt/eq thing, or just \"\" to indicate \"any version\"\n\tcreateToken('COMPARATORLOOSE', `^${src[t.GTLT]}\\\\s*(${src[t.LOOSEPLAIN]})$|^$`);\n\tcreateToken('COMPARATOR', `^${src[t.GTLT]}\\\\s*(${src[t.FULLPLAIN]})$|^$`);\n\n\t// An expression to strip any whitespace between the gtlt and the thing\n\t// it modifies, so that `> 1.2.3` ==> `>1.2.3`\n\tcreateToken('COMPARATORTRIM', `(\\\\s*)${src[t.GTLT]\n\t}\\\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true);\n\texports.comparatorTrimReplace = '$1$2$3';\n\n\t// Something like `1.2.3 - 1.2.4`\n\t// Note that these all use the loose form, because they'll be\n\t// checked against either the strict or loose comparator form\n\t// later.\n\tcreateToken('HYPHENRANGE', `^\\\\s*(${src[t.XRANGEPLAIN]})` +\n\t                   `\\\\s+-\\\\s+` +\n\t                   `(${src[t.XRANGEPLAIN]})` +\n\t                   `\\\\s*$`);\n\n\tcreateToken('HYPHENRANGELOOSE', `^\\\\s*(${src[t.XRANGEPLAINLOOSE]})` +\n\t                        `\\\\s+-\\\\s+` +\n\t                        `(${src[t.XRANGEPLAINLOOSE]})` +\n\t                        `\\\\s*$`);\n\n\t// Star ranges basically just allow anything at all.\n\tcreateToken('STAR', '(<|>)?=?\\\\s*\\\\*');\n\t// >=0.0.0 is like a star\n\tcreateToken('GTE0', '^\\\\s*>=\\\\s*0\\\\.0\\\\.0\\\\s*$');\n\tcreateToken('GTE0PRE', '^\\\\s*>=\\\\s*0\\\\.0\\\\.0-0\\\\s*$');\n} (re$3, re$3.exports));\n\n// parse out just the options we care about so we always get a consistent\n// obj with keys in a consistent order.\nconst opts = ['includePrerelease', 'loose', 'rtl'];\nconst parseOptions$2 = options =>\n  !options ? {}\n  : typeof options !== 'object' ? { loose: true }\n  : opts.filter(k => options[k]).reduce((o, k) => {\n    o[k] = true;\n    return o\n  }, {});\nvar parseOptions_1 = parseOptions$2;\n\nconst numeric = /^[0-9]+$/;\nconst compareIdentifiers$1 = (a, b) => {\n  const anum = numeric.test(a);\n  const bnum = numeric.test(b);\n\n  if (anum && bnum) {\n    a = +a;\n    b = +b;\n  }\n\n  return a === b ? 0\n    : (anum && !bnum) ? -1\n    : (bnum && !anum) ? 1\n    : a < b ? -1\n    : 1\n};\n\nconst rcompareIdentifiers = (a, b) => compareIdentifiers$1(b, a);\n\nvar identifiers = {\n  compareIdentifiers: compareIdentifiers$1,\n  rcompareIdentifiers,\n};\n\nconst debug = debug_1;\nconst { MAX_LENGTH: MAX_LENGTH$1, MAX_SAFE_INTEGER } = constants;\nconst { re: re$2, t: t$2 } = re$3.exports;\n\nconst parseOptions$1 = parseOptions_1;\nconst { compareIdentifiers } = identifiers;\nclass SemVer$c {\n  constructor (version, options) {\n    options = parseOptions$1(options);\n\n    if (version instanceof SemVer$c) {\n      if (version.loose === !!options.loose &&\n          version.includePrerelease === !!options.includePrerelease) {\n        return version\n      } else {\n        version = version.version;\n      }\n    } else if (typeof version !== 'string') {\n      throw new TypeError(`Invalid Version: ${version}`)\n    }\n\n    if (version.length > MAX_LENGTH$1) {\n      throw new TypeError(\n        `version is longer than ${MAX_LENGTH$1} characters`\n      )\n    }\n\n    debug('SemVer', version, options);\n    this.options = options;\n    this.loose = !!options.loose;\n    // this isn't actually relevant for versions, but keep it so that we\n    // don't run into trouble passing this.options around.\n    this.includePrerelease = !!options.includePrerelease;\n\n    const m = version.trim().match(options.loose ? re$2[t$2.LOOSE] : re$2[t$2.FULL]);\n\n    if (!m) {\n      throw new TypeError(`Invalid Version: ${version}`)\n    }\n\n    this.raw = version;\n\n    // these are actually numbers\n    this.major = +m[1];\n    this.minor = +m[2];\n    this.patch = +m[3];\n\n    if (this.major > MAX_SAFE_INTEGER || this.major < 0) {\n      throw new TypeError('Invalid major version')\n    }\n\n    if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {\n      throw new TypeError('Invalid minor version')\n    }\n\n    if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {\n      throw new TypeError('Invalid patch version')\n    }\n\n    // numberify any prerelease numeric ids\n    if (!m[4]) {\n      this.prerelease = [];\n    } else {\n      this.prerelease = m[4].split('.').map((id) => {\n        if (/^[0-9]+$/.test(id)) {\n          const num = +id;\n          if (num >= 0 && num < MAX_SAFE_INTEGER) {\n            return num\n          }\n        }\n        return id\n      });\n    }\n\n    this.build = m[5] ? m[5].split('.') : [];\n    this.format();\n  }\n\n  format () {\n    this.version = `${this.major}.${this.minor}.${this.patch}`;\n    if (this.prerelease.length) {\n      this.version += `-${this.prerelease.join('.')}`;\n    }\n    return this.version\n  }\n\n  toString () {\n    return this.version\n  }\n\n  compare (other) {\n    debug('SemVer.compare', this.version, this.options, other);\n    if (!(other instanceof SemVer$c)) {\n      if (typeof other === 'string' && other === this.version) {\n        return 0\n      }\n      other = new SemVer$c(other, this.options);\n    }\n\n    if (other.version === this.version) {\n      return 0\n    }\n\n    return this.compareMain(other) || this.comparePre(other)\n  }\n\n  compareMain (other) {\n    if (!(other instanceof SemVer$c)) {\n      other = new SemVer$c(other, this.options);\n    }\n\n    return (\n      compareIdentifiers(this.major, other.major) ||\n      compareIdentifiers(this.minor, other.minor) ||\n      compareIdentifiers(this.patch, other.patch)\n    )\n  }\n\n  comparePre (other) {\n    if (!(other instanceof SemVer$c)) {\n      other = new SemVer$c(other, this.options);\n    }\n\n    // NOT having a prerelease is > having one\n    if (this.prerelease.length && !other.prerelease.length) {\n      return -1\n    } else if (!this.prerelease.length && other.prerelease.length) {\n      return 1\n    } else if (!this.prerelease.length && !other.prerelease.length) {\n      return 0\n    }\n\n    let i = 0;\n    do {\n      const a = this.prerelease[i];\n      const b = other.prerelease[i];\n      debug('prerelease compare', i, a, b);\n      if (a === undefined && b === undefined) {\n        return 0\n      } else if (b === undefined) {\n        return 1\n      } else if (a === undefined) {\n        return -1\n      } else if (a === b) {\n        continue\n      } else {\n        return compareIdentifiers(a, b)\n      }\n    } while (++i)\n  }\n\n  compareBuild (other) {\n    if (!(other instanceof SemVer$c)) {\n      other = new SemVer$c(other, this.options);\n    }\n\n    let i = 0;\n    do {\n      const a = this.build[i];\n      const b = other.build[i];\n      debug('prerelease compare', i, a, b);\n      if (a === undefined && b === undefined) {\n        return 0\n      } else if (b === undefined) {\n        return 1\n      } else if (a === undefined) {\n        return -1\n      } else if (a === b) {\n        continue\n      } else {\n        return compareIdentifiers(a, b)\n      }\n    } while (++i)\n  }\n\n  // preminor will bump the version up to the next minor release, and immediately\n  // down to pre-release. premajor and prepatch work the same way.\n  inc (release, identifier) {\n    switch (release) {\n      case 'premajor':\n        this.prerelease.length = 0;\n        this.patch = 0;\n        this.minor = 0;\n        this.major++;\n        this.inc('pre', identifier);\n        break\n      case 'preminor':\n        this.prerelease.length = 0;\n        this.patch = 0;\n        this.minor++;\n        this.inc('pre', identifier);\n        break\n      case 'prepatch':\n        // If this is already a prerelease, it will bump to the next version\n        // drop any prereleases that might already exist, since they are not\n        // relevant at this point.\n        this.prerelease.length = 0;\n        this.inc('patch', identifier);\n        this.inc('pre', identifier);\n        break\n      // If the input is a non-prerelease version, this acts the same as\n      // prepatch.\n      case 'prerelease':\n        if (this.prerelease.length === 0) {\n          this.inc('patch', identifier);\n        }\n        this.inc('pre', identifier);\n        break\n\n      case 'major':\n        // If this is a pre-major version, bump up to the same major version.\n        // Otherwise increment major.\n        // 1.0.0-5 bumps to 1.0.0\n        // 1.1.0 bumps to 2.0.0\n        if (\n          this.minor !== 0 ||\n          this.patch !== 0 ||\n          this.prerelease.length === 0\n        ) {\n          this.major++;\n        }\n        this.minor = 0;\n        this.patch = 0;\n        this.prerelease = [];\n        break\n      case 'minor':\n        // If this is a pre-minor version, bump up to the same minor version.\n        // Otherwise increment minor.\n        // 1.2.0-5 bumps to 1.2.0\n        // 1.2.1 bumps to 1.3.0\n        if (this.patch !== 0 || this.prerelease.length === 0) {\n          this.minor++;\n        }\n        this.patch = 0;\n        this.prerelease = [];\n        break\n      case 'patch':\n        // If this is not a pre-release version, it will increment the patch.\n        // If it is a pre-release it will bump up to the same patch version.\n        // 1.2.0-5 patches to 1.2.0\n        // 1.2.0 patches to 1.2.1\n        if (this.prerelease.length === 0) {\n          this.patch++;\n        }\n        this.prerelease = [];\n        break\n      // This probably shouldn't be used publicly.\n      // 1.0.0 'pre' would become 1.0.0-0 which is the wrong direction.\n      case 'pre':\n        if (this.prerelease.length === 0) {\n          this.prerelease = [0];\n        } else {\n          let i = this.prerelease.length;\n          while (--i >= 0) {\n            if (typeof this.prerelease[i] === 'number') {\n              this.prerelease[i]++;\n              i = -2;\n            }\n          }\n          if (i === -1) {\n            // didn't increment anything\n            this.prerelease.push(0);\n          }\n        }\n        if (identifier) {\n          // 1.2.0-beta.1 bumps to 1.2.0-beta.2,\n          // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0\n          if (compareIdentifiers(this.prerelease[0], identifier) === 0) {\n            if (isNaN(this.prerelease[1])) {\n              this.prerelease = [identifier, 0];\n            }\n          } else {\n            this.prerelease = [identifier, 0];\n          }\n        }\n        break\n\n      default:\n        throw new Error(`invalid increment argument: ${release}`)\n    }\n    this.format();\n    this.raw = this.version;\n    return this\n  }\n}\n\nvar semver$2 = SemVer$c;\n\nconst { MAX_LENGTH } = constants;\nconst { re: re$1, t: t$1 } = re$3.exports;\nconst SemVer$b = semver$2;\n\nconst parseOptions = parseOptions_1;\nconst parse$5 = (version, options) => {\n  options = parseOptions(options);\n\n  if (version instanceof SemVer$b) {\n    return version\n  }\n\n  if (typeof version !== 'string') {\n    return null\n  }\n\n  if (version.length > MAX_LENGTH) {\n    return null\n  }\n\n  const r = options.loose ? re$1[t$1.LOOSE] : re$1[t$1.FULL];\n  if (!r.test(version)) {\n    return null\n  }\n\n  try {\n    return new SemVer$b(version, options)\n  } catch (er) {\n    return null\n  }\n};\n\nvar parse_1 = parse$5;\n\nconst parse$4 = parse_1;\nconst valid$1 = (version, options) => {\n  const v = parse$4(version, options);\n  return v ? v.version : null\n};\nvar valid_1 = valid$1;\n\nconst parse$3 = parse_1;\nconst clean = (version, options) => {\n  const s = parse$3(version.trim().replace(/^[=v]+/, ''), options);\n  return s ? s.version : null\n};\nvar clean_1 = clean;\n\nconst SemVer$a = semver$2;\n\nconst inc = (version, release, options, identifier) => {\n  if (typeof (options) === 'string') {\n    identifier = options;\n    options = undefined;\n  }\n\n  try {\n    return new SemVer$a(\n      version instanceof SemVer$a ? version.version : version,\n      options\n    ).inc(release, identifier).version\n  } catch (er) {\n    return null\n  }\n};\nvar inc_1 = inc;\n\nconst SemVer$9 = semver$2;\nconst compare$a = (a, b, loose) =>\n  new SemVer$9(a, loose).compare(new SemVer$9(b, loose));\n\nvar compare_1 = compare$a;\n\nconst compare$9 = compare_1;\nconst eq$2 = (a, b, loose) => compare$9(a, b, loose) === 0;\nvar eq_1 = eq$2;\n\nconst parse$2 = parse_1;\nconst eq$1 = eq_1;\n\nconst diff = (version1, version2) => {\n  if (eq$1(version1, version2)) {\n    return null\n  } else {\n    const v1 = parse$2(version1);\n    const v2 = parse$2(version2);\n    const hasPre = v1.prerelease.length || v2.prerelease.length;\n    const prefix = hasPre ? 'pre' : '';\n    const defaultResult = hasPre ? 'prerelease' : '';\n    for (const key in v1) {\n      if (key === 'major' || key === 'minor' || key === 'patch') {\n        if (v1[key] !== v2[key]) {\n          return prefix + key\n        }\n      }\n    }\n    return defaultResult // may be undefined\n  }\n};\nvar diff_1 = diff;\n\nconst SemVer$8 = semver$2;\nconst major = (a, loose) => new SemVer$8(a, loose).major;\nvar major_1 = major;\n\nconst SemVer$7 = semver$2;\nconst minor = (a, loose) => new SemVer$7(a, loose).minor;\nvar minor_1 = minor;\n\nconst SemVer$6 = semver$2;\nconst patch = (a, loose) => new SemVer$6(a, loose).patch;\nvar patch_1 = patch;\n\nconst parse$1 = parse_1;\nconst prerelease = (version, options) => {\n  const parsed = parse$1(version, options);\n  return (parsed && parsed.prerelease.length) ? parsed.prerelease : null\n};\nvar prerelease_1 = prerelease;\n\nconst compare$8 = compare_1;\nconst rcompare = (a, b, loose) => compare$8(b, a, loose);\nvar rcompare_1 = rcompare;\n\nconst compare$7 = compare_1;\nconst compareLoose = (a, b) => compare$7(a, b, true);\nvar compareLoose_1 = compareLoose;\n\nconst SemVer$5 = semver$2;\nconst compareBuild$2 = (a, b, loose) => {\n  const versionA = new SemVer$5(a, loose);\n  const versionB = new SemVer$5(b, loose);\n  return versionA.compare(versionB) || versionA.compareBuild(versionB)\n};\nvar compareBuild_1 = compareBuild$2;\n\nconst compareBuild$1 = compareBuild_1;\nconst sort = (list, loose) => list.sort((a, b) => compareBuild$1(a, b, loose));\nvar sort_1 = sort;\n\nconst compareBuild = compareBuild_1;\nconst rsort = (list, loose) => list.sort((a, b) => compareBuild(b, a, loose));\nvar rsort_1 = rsort;\n\nconst compare$6 = compare_1;\nconst gt$3 = (a, b, loose) => compare$6(a, b, loose) > 0;\nvar gt_1 = gt$3;\n\nconst compare$5 = compare_1;\nconst lt$2 = (a, b, loose) => compare$5(a, b, loose) < 0;\nvar lt_1 = lt$2;\n\nconst compare$4 = compare_1;\nconst neq$1 = (a, b, loose) => compare$4(a, b, loose) !== 0;\nvar neq_1 = neq$1;\n\nconst compare$3 = compare_1;\nconst gte$2 = (a, b, loose) => compare$3(a, b, loose) >= 0;\nvar gte_1 = gte$2;\n\nconst compare$2 = compare_1;\nconst lte$2 = (a, b, loose) => compare$2(a, b, loose) <= 0;\nvar lte_1 = lte$2;\n\nconst eq = eq_1;\nconst neq = neq_1;\nconst gt$2 = gt_1;\nconst gte$1 = gte_1;\nconst lt$1 = lt_1;\nconst lte$1 = lte_1;\n\nconst cmp = (a, op, b, loose) => {\n  switch (op) {\n    case '===':\n      if (typeof a === 'object') {\n        a = a.version;\n      }\n      if (typeof b === 'object') {\n        b = b.version;\n      }\n      return a === b\n\n    case '!==':\n      if (typeof a === 'object') {\n        a = a.version;\n      }\n      if (typeof b === 'object') {\n        b = b.version;\n      }\n      return a !== b\n\n    case '':\n    case '=':\n    case '==':\n      return eq(a, b, loose)\n\n    case '!=':\n      return neq(a, b, loose)\n\n    case '>':\n      return gt$2(a, b, loose)\n\n    case '>=':\n      return gte$1(a, b, loose)\n\n    case '<':\n      return lt$1(a, b, loose)\n\n    case '<=':\n      return lte$1(a, b, loose)\n\n    default:\n      throw new TypeError(`Invalid operator: ${op}`)\n  }\n};\nvar cmp_1 = cmp;\n\nconst SemVer$4 = semver$2;\nconst parse = parse_1;\nconst { re, t } = re$3.exports;\n\nconst coerce = (version, options) => {\n  if (version instanceof SemVer$4) {\n    return version\n  }\n\n  if (typeof version === 'number') {\n    version = String(version);\n  }\n\n  if (typeof version !== 'string') {\n    return null\n  }\n\n  options = options || {};\n\n  let match = null;\n  if (!options.rtl) {\n    match = version.match(re[t.COERCE]);\n  } else {\n    // Find the right-most coercible string that does not share\n    // a terminus with a more left-ward coercible string.\n    // Eg, '1.2.3.4' wants to coerce '2.3.4', not '3.4' or '4'\n    //\n    // Walk through the string checking with a /g regexp\n    // Manually set the index so as to pick up overlapping matches.\n    // Stop when we get a match that ends at the string end, since no\n    // coercible string can be more right-ward without the same terminus.\n    let next;\n    while ((next = re[t.COERCERTL].exec(version)) &&\n        (!match || match.index + match[0].length !== version.length)\n    ) {\n      if (!match ||\n            next.index + next[0].length !== match.index + match[0].length) {\n        match = next;\n      }\n      re[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;\n    }\n    // leave it in a clean state\n    re[t.COERCERTL].lastIndex = -1;\n  }\n\n  if (match === null) {\n    return null\n  }\n\n  return parse(`${match[2]}.${match[3] || '0'}.${match[4] || '0'}`, options)\n};\nvar coerce_1 = coerce;\n\nvar iterator;\nvar hasRequiredIterator;\n\nfunction requireIterator () {\n\tif (hasRequiredIterator) return iterator;\n\thasRequiredIterator = 1;\n\titerator = function (Yallist) {\n\t  Yallist.prototype[Symbol.iterator] = function* () {\n\t    for (let walker = this.head; walker; walker = walker.next) {\n\t      yield walker.value;\n\t    }\n\t  };\n\t};\n\treturn iterator;\n}\n\nvar yallist;\nvar hasRequiredYallist;\n\nfunction requireYallist () {\n\tif (hasRequiredYallist) return yallist;\n\thasRequiredYallist = 1;\n\tyallist = Yallist;\n\n\tYallist.Node = Node;\n\tYallist.create = Yallist;\n\n\tfunction Yallist (list) {\n\t  var self = this;\n\t  if (!(self instanceof Yallist)) {\n\t    self = new Yallist();\n\t  }\n\n\t  self.tail = null;\n\t  self.head = null;\n\t  self.length = 0;\n\n\t  if (list && typeof list.forEach === 'function') {\n\t    list.forEach(function (item) {\n\t      self.push(item);\n\t    });\n\t  } else if (arguments.length > 0) {\n\t    for (var i = 0, l = arguments.length; i < l; i++) {\n\t      self.push(arguments[i]);\n\t    }\n\t  }\n\n\t  return self\n\t}\n\n\tYallist.prototype.removeNode = function (node) {\n\t  if (node.list !== this) {\n\t    throw new Error('removing node which does not belong to this list')\n\t  }\n\n\t  var next = node.next;\n\t  var prev = node.prev;\n\n\t  if (next) {\n\t    next.prev = prev;\n\t  }\n\n\t  if (prev) {\n\t    prev.next = next;\n\t  }\n\n\t  if (node === this.head) {\n\t    this.head = next;\n\t  }\n\t  if (node === this.tail) {\n\t    this.tail = prev;\n\t  }\n\n\t  node.list.length--;\n\t  node.next = null;\n\t  node.prev = null;\n\t  node.list = null;\n\n\t  return next\n\t};\n\n\tYallist.prototype.unshiftNode = function (node) {\n\t  if (node === this.head) {\n\t    return\n\t  }\n\n\t  if (node.list) {\n\t    node.list.removeNode(node);\n\t  }\n\n\t  var head = this.head;\n\t  node.list = this;\n\t  node.next = head;\n\t  if (head) {\n\t    head.prev = node;\n\t  }\n\n\t  this.head = node;\n\t  if (!this.tail) {\n\t    this.tail = node;\n\t  }\n\t  this.length++;\n\t};\n\n\tYallist.prototype.pushNode = function (node) {\n\t  if (node === this.tail) {\n\t    return\n\t  }\n\n\t  if (node.list) {\n\t    node.list.removeNode(node);\n\t  }\n\n\t  var tail = this.tail;\n\t  node.list = this;\n\t  node.prev = tail;\n\t  if (tail) {\n\t    tail.next = node;\n\t  }\n\n\t  this.tail = node;\n\t  if (!this.head) {\n\t    this.head = node;\n\t  }\n\t  this.length++;\n\t};\n\n\tYallist.prototype.push = function () {\n\t  for (var i = 0, l = arguments.length; i < l; i++) {\n\t    push(this, arguments[i]);\n\t  }\n\t  return this.length\n\t};\n\n\tYallist.prototype.unshift = function () {\n\t  for (var i = 0, l = arguments.length; i < l; i++) {\n\t    unshift(this, arguments[i]);\n\t  }\n\t  return this.length\n\t};\n\n\tYallist.prototype.pop = function () {\n\t  if (!this.tail) {\n\t    return undefined\n\t  }\n\n\t  var res = this.tail.value;\n\t  this.tail = this.tail.prev;\n\t  if (this.tail) {\n\t    this.tail.next = null;\n\t  } else {\n\t    this.head = null;\n\t  }\n\t  this.length--;\n\t  return res\n\t};\n\n\tYallist.prototype.shift = function () {\n\t  if (!this.head) {\n\t    return undefined\n\t  }\n\n\t  var res = this.head.value;\n\t  this.head = this.head.next;\n\t  if (this.head) {\n\t    this.head.prev = null;\n\t  } else {\n\t    this.tail = null;\n\t  }\n\t  this.length--;\n\t  return res\n\t};\n\n\tYallist.prototype.forEach = function (fn, thisp) {\n\t  thisp = thisp || this;\n\t  for (var walker = this.head, i = 0; walker !== null; i++) {\n\t    fn.call(thisp, walker.value, i, this);\n\t    walker = walker.next;\n\t  }\n\t};\n\n\tYallist.prototype.forEachReverse = function (fn, thisp) {\n\t  thisp = thisp || this;\n\t  for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {\n\t    fn.call(thisp, walker.value, i, this);\n\t    walker = walker.prev;\n\t  }\n\t};\n\n\tYallist.prototype.get = function (n) {\n\t  for (var i = 0, walker = this.head; walker !== null && i < n; i++) {\n\t    // abort out of the list early if we hit a cycle\n\t    walker = walker.next;\n\t  }\n\t  if (i === n && walker !== null) {\n\t    return walker.value\n\t  }\n\t};\n\n\tYallist.prototype.getReverse = function (n) {\n\t  for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {\n\t    // abort out of the list early if we hit a cycle\n\t    walker = walker.prev;\n\t  }\n\t  if (i === n && walker !== null) {\n\t    return walker.value\n\t  }\n\t};\n\n\tYallist.prototype.map = function (fn, thisp) {\n\t  thisp = thisp || this;\n\t  var res = new Yallist();\n\t  for (var walker = this.head; walker !== null;) {\n\t    res.push(fn.call(thisp, walker.value, this));\n\t    walker = walker.next;\n\t  }\n\t  return res\n\t};\n\n\tYallist.prototype.mapReverse = function (fn, thisp) {\n\t  thisp = thisp || this;\n\t  var res = new Yallist();\n\t  for (var walker = this.tail; walker !== null;) {\n\t    res.push(fn.call(thisp, walker.value, this));\n\t    walker = walker.prev;\n\t  }\n\t  return res\n\t};\n\n\tYallist.prototype.reduce = function (fn, initial) {\n\t  var acc;\n\t  var walker = this.head;\n\t  if (arguments.length > 1) {\n\t    acc = initial;\n\t  } else if (this.head) {\n\t    walker = this.head.next;\n\t    acc = this.head.value;\n\t  } else {\n\t    throw new TypeError('Reduce of empty list with no initial value')\n\t  }\n\n\t  for (var i = 0; walker !== null; i++) {\n\t    acc = fn(acc, walker.value, i);\n\t    walker = walker.next;\n\t  }\n\n\t  return acc\n\t};\n\n\tYallist.prototype.reduceReverse = function (fn, initial) {\n\t  var acc;\n\t  var walker = this.tail;\n\t  if (arguments.length > 1) {\n\t    acc = initial;\n\t  } else if (this.tail) {\n\t    walker = this.tail.prev;\n\t    acc = this.tail.value;\n\t  } else {\n\t    throw new TypeError('Reduce of empty list with no initial value')\n\t  }\n\n\t  for (var i = this.length - 1; walker !== null; i--) {\n\t    acc = fn(acc, walker.value, i);\n\t    walker = walker.prev;\n\t  }\n\n\t  return acc\n\t};\n\n\tYallist.prototype.toArray = function () {\n\t  var arr = new Array(this.length);\n\t  for (var i = 0, walker = this.head; walker !== null; i++) {\n\t    arr[i] = walker.value;\n\t    walker = walker.next;\n\t  }\n\t  return arr\n\t};\n\n\tYallist.prototype.toArrayReverse = function () {\n\t  var arr = new Array(this.length);\n\t  for (var i = 0, walker = this.tail; walker !== null; i++) {\n\t    arr[i] = walker.value;\n\t    walker = walker.prev;\n\t  }\n\t  return arr\n\t};\n\n\tYallist.prototype.slice = function (from, to) {\n\t  to = to || this.length;\n\t  if (to < 0) {\n\t    to += this.length;\n\t  }\n\t  from = from || 0;\n\t  if (from < 0) {\n\t    from += this.length;\n\t  }\n\t  var ret = new Yallist();\n\t  if (to < from || to < 0) {\n\t    return ret\n\t  }\n\t  if (from < 0) {\n\t    from = 0;\n\t  }\n\t  if (to > this.length) {\n\t    to = this.length;\n\t  }\n\t  for (var i = 0, walker = this.head; walker !== null && i < from; i++) {\n\t    walker = walker.next;\n\t  }\n\t  for (; walker !== null && i < to; i++, walker = walker.next) {\n\t    ret.push(walker.value);\n\t  }\n\t  return ret\n\t};\n\n\tYallist.prototype.sliceReverse = function (from, to) {\n\t  to = to || this.length;\n\t  if (to < 0) {\n\t    to += this.length;\n\t  }\n\t  from = from || 0;\n\t  if (from < 0) {\n\t    from += this.length;\n\t  }\n\t  var ret = new Yallist();\n\t  if (to < from || to < 0) {\n\t    return ret\n\t  }\n\t  if (from < 0) {\n\t    from = 0;\n\t  }\n\t  if (to > this.length) {\n\t    to = this.length;\n\t  }\n\t  for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {\n\t    walker = walker.prev;\n\t  }\n\t  for (; walker !== null && i > from; i--, walker = walker.prev) {\n\t    ret.push(walker.value);\n\t  }\n\t  return ret\n\t};\n\n\tYallist.prototype.splice = function (start, deleteCount, ...nodes) {\n\t  if (start > this.length) {\n\t    start = this.length - 1;\n\t  }\n\t  if (start < 0) {\n\t    start = this.length + start;\n\t  }\n\n\t  for (var i = 0, walker = this.head; walker !== null && i < start; i++) {\n\t    walker = walker.next;\n\t  }\n\n\t  var ret = [];\n\t  for (var i = 0; walker && i < deleteCount; i++) {\n\t    ret.push(walker.value);\n\t    walker = this.removeNode(walker);\n\t  }\n\t  if (walker === null) {\n\t    walker = this.tail;\n\t  }\n\n\t  if (walker !== this.head && walker !== this.tail) {\n\t    walker = walker.prev;\n\t  }\n\n\t  for (var i = 0; i < nodes.length; i++) {\n\t    walker = insert(this, walker, nodes[i]);\n\t  }\n\t  return ret;\n\t};\n\n\tYallist.prototype.reverse = function () {\n\t  var head = this.head;\n\t  var tail = this.tail;\n\t  for (var walker = head; walker !== null; walker = walker.prev) {\n\t    var p = walker.prev;\n\t    walker.prev = walker.next;\n\t    walker.next = p;\n\t  }\n\t  this.head = tail;\n\t  this.tail = head;\n\t  return this\n\t};\n\n\tfunction insert (self, node, value) {\n\t  var inserted = node === self.head ?\n\t    new Node(value, null, node, self) :\n\t    new Node(value, node, node.next, self);\n\n\t  if (inserted.next === null) {\n\t    self.tail = inserted;\n\t  }\n\t  if (inserted.prev === null) {\n\t    self.head = inserted;\n\t  }\n\n\t  self.length++;\n\n\t  return inserted\n\t}\n\n\tfunction push (self, item) {\n\t  self.tail = new Node(item, self.tail, null, self);\n\t  if (!self.head) {\n\t    self.head = self.tail;\n\t  }\n\t  self.length++;\n\t}\n\n\tfunction unshift (self, item) {\n\t  self.head = new Node(item, null, self.head, self);\n\t  if (!self.tail) {\n\t    self.tail = self.head;\n\t  }\n\t  self.length++;\n\t}\n\n\tfunction Node (value, prev, next, list) {\n\t  if (!(this instanceof Node)) {\n\t    return new Node(value, prev, next, list)\n\t  }\n\n\t  this.list = list;\n\t  this.value = value;\n\n\t  if (prev) {\n\t    prev.next = this;\n\t    this.prev = prev;\n\t  } else {\n\t    this.prev = null;\n\t  }\n\n\t  if (next) {\n\t    next.prev = this;\n\t    this.next = next;\n\t  } else {\n\t    this.next = null;\n\t  }\n\t}\n\n\ttry {\n\t  // add if support for Symbol.iterator is present\n\t  requireIterator()(Yallist);\n\t} catch (er) {}\n\treturn yallist;\n}\n\nvar lruCache;\nvar hasRequiredLruCache;\n\nfunction requireLruCache () {\n\tif (hasRequiredLruCache) return lruCache;\n\thasRequiredLruCache = 1;\n\n\t// A linked list to keep track of recently-used-ness\n\tconst Yallist = requireYallist();\n\n\tconst MAX = Symbol('max');\n\tconst LENGTH = Symbol('length');\n\tconst LENGTH_CALCULATOR = Symbol('lengthCalculator');\n\tconst ALLOW_STALE = Symbol('allowStale');\n\tconst MAX_AGE = Symbol('maxAge');\n\tconst DISPOSE = Symbol('dispose');\n\tconst NO_DISPOSE_ON_SET = Symbol('noDisposeOnSet');\n\tconst LRU_LIST = Symbol('lruList');\n\tconst CACHE = Symbol('cache');\n\tconst UPDATE_AGE_ON_GET = Symbol('updateAgeOnGet');\n\n\tconst naiveLength = () => 1;\n\n\t// lruList is a yallist where the head is the youngest\n\t// item, and the tail is the oldest.  the list contains the Hit\n\t// objects as the entries.\n\t// Each Hit object has a reference to its Yallist.Node.  This\n\t// never changes.\n\t//\n\t// cache is a Map (or PseudoMap) that matches the keys to\n\t// the Yallist.Node object.\n\tclass LRUCache {\n\t  constructor (options) {\n\t    if (typeof options === 'number')\n\t      options = { max: options };\n\n\t    if (!options)\n\t      options = {};\n\n\t    if (options.max && (typeof options.max !== 'number' || options.max < 0))\n\t      throw new TypeError('max must be a non-negative number')\n\t    // Kind of weird to have a default max of Infinity, but oh well.\n\t    this[MAX] = options.max || Infinity;\n\n\t    const lc = options.length || naiveLength;\n\t    this[LENGTH_CALCULATOR] = (typeof lc !== 'function') ? naiveLength : lc;\n\t    this[ALLOW_STALE] = options.stale || false;\n\t    if (options.maxAge && typeof options.maxAge !== 'number')\n\t      throw new TypeError('maxAge must be a number')\n\t    this[MAX_AGE] = options.maxAge || 0;\n\t    this[DISPOSE] = options.dispose;\n\t    this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false;\n\t    this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false;\n\t    this.reset();\n\t  }\n\n\t  // resize the cache when the max changes.\n\t  set max (mL) {\n\t    if (typeof mL !== 'number' || mL < 0)\n\t      throw new TypeError('max must be a non-negative number')\n\n\t    this[MAX] = mL || Infinity;\n\t    trim(this);\n\t  }\n\t  get max () {\n\t    return this[MAX]\n\t  }\n\n\t  set allowStale (allowStale) {\n\t    this[ALLOW_STALE] = !!allowStale;\n\t  }\n\t  get allowStale () {\n\t    return this[ALLOW_STALE]\n\t  }\n\n\t  set maxAge (mA) {\n\t    if (typeof mA !== 'number')\n\t      throw new TypeError('maxAge must be a non-negative number')\n\n\t    this[MAX_AGE] = mA;\n\t    trim(this);\n\t  }\n\t  get maxAge () {\n\t    return this[MAX_AGE]\n\t  }\n\n\t  // resize the cache when the lengthCalculator changes.\n\t  set lengthCalculator (lC) {\n\t    if (typeof lC !== 'function')\n\t      lC = naiveLength;\n\n\t    if (lC !== this[LENGTH_CALCULATOR]) {\n\t      this[LENGTH_CALCULATOR] = lC;\n\t      this[LENGTH] = 0;\n\t      this[LRU_LIST].forEach(hit => {\n\t        hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key);\n\t        this[LENGTH] += hit.length;\n\t      });\n\t    }\n\t    trim(this);\n\t  }\n\t  get lengthCalculator () { return this[LENGTH_CALCULATOR] }\n\n\t  get length () { return this[LENGTH] }\n\t  get itemCount () { return this[LRU_LIST].length }\n\n\t  rforEach (fn, thisp) {\n\t    thisp = thisp || this;\n\t    for (let walker = this[LRU_LIST].tail; walker !== null;) {\n\t      const prev = walker.prev;\n\t      forEachStep(this, fn, walker, thisp);\n\t      walker = prev;\n\t    }\n\t  }\n\n\t  forEach (fn, thisp) {\n\t    thisp = thisp || this;\n\t    for (let walker = this[LRU_LIST].head; walker !== null;) {\n\t      const next = walker.next;\n\t      forEachStep(this, fn, walker, thisp);\n\t      walker = next;\n\t    }\n\t  }\n\n\t  keys () {\n\t    return this[LRU_LIST].toArray().map(k => k.key)\n\t  }\n\n\t  values () {\n\t    return this[LRU_LIST].toArray().map(k => k.value)\n\t  }\n\n\t  reset () {\n\t    if (this[DISPOSE] &&\n\t        this[LRU_LIST] &&\n\t        this[LRU_LIST].length) {\n\t      this[LRU_LIST].forEach(hit => this[DISPOSE](hit.key, hit.value));\n\t    }\n\n\t    this[CACHE] = new Map(); // hash of items by key\n\t    this[LRU_LIST] = new Yallist(); // list of items in order of use recency\n\t    this[LENGTH] = 0; // length of items in the list\n\t  }\n\n\t  dump () {\n\t    return this[LRU_LIST].map(hit =>\n\t      isStale(this, hit) ? false : {\n\t        k: hit.key,\n\t        v: hit.value,\n\t        e: hit.now + (hit.maxAge || 0)\n\t      }).toArray().filter(h => h)\n\t  }\n\n\t  dumpLru () {\n\t    return this[LRU_LIST]\n\t  }\n\n\t  set (key, value, maxAge) {\n\t    maxAge = maxAge || this[MAX_AGE];\n\n\t    if (maxAge && typeof maxAge !== 'number')\n\t      throw new TypeError('maxAge must be a number')\n\n\t    const now = maxAge ? Date.now() : 0;\n\t    const len = this[LENGTH_CALCULATOR](value, key);\n\n\t    if (this[CACHE].has(key)) {\n\t      if (len > this[MAX]) {\n\t        del(this, this[CACHE].get(key));\n\t        return false\n\t      }\n\n\t      const node = this[CACHE].get(key);\n\t      const item = node.value;\n\n\t      // dispose of the old one before overwriting\n\t      // split out into 2 ifs for better coverage tracking\n\t      if (this[DISPOSE]) {\n\t        if (!this[NO_DISPOSE_ON_SET])\n\t          this[DISPOSE](key, item.value);\n\t      }\n\n\t      item.now = now;\n\t      item.maxAge = maxAge;\n\t      item.value = value;\n\t      this[LENGTH] += len - item.length;\n\t      item.length = len;\n\t      this.get(key);\n\t      trim(this);\n\t      return true\n\t    }\n\n\t    const hit = new Entry(key, value, len, now, maxAge);\n\n\t    // oversized objects fall out of cache automatically.\n\t    if (hit.length > this[MAX]) {\n\t      if (this[DISPOSE])\n\t        this[DISPOSE](key, value);\n\n\t      return false\n\t    }\n\n\t    this[LENGTH] += hit.length;\n\t    this[LRU_LIST].unshift(hit);\n\t    this[CACHE].set(key, this[LRU_LIST].head);\n\t    trim(this);\n\t    return true\n\t  }\n\n\t  has (key) {\n\t    if (!this[CACHE].has(key)) return false\n\t    const hit = this[CACHE].get(key).value;\n\t    return !isStale(this, hit)\n\t  }\n\n\t  get (key) {\n\t    return get(this, key, true)\n\t  }\n\n\t  peek (key) {\n\t    return get(this, key, false)\n\t  }\n\n\t  pop () {\n\t    const node = this[LRU_LIST].tail;\n\t    if (!node)\n\t      return null\n\n\t    del(this, node);\n\t    return node.value\n\t  }\n\n\t  del (key) {\n\t    del(this, this[CACHE].get(key));\n\t  }\n\n\t  load (arr) {\n\t    // reset the cache\n\t    this.reset();\n\n\t    const now = Date.now();\n\t    // A previous serialized cache has the most recent items first\n\t    for (let l = arr.length - 1; l >= 0; l--) {\n\t      const hit = arr[l];\n\t      const expiresAt = hit.e || 0;\n\t      if (expiresAt === 0)\n\t        // the item was created without expiration in a non aged cache\n\t        this.set(hit.k, hit.v);\n\t      else {\n\t        const maxAge = expiresAt - now;\n\t        // dont add already expired items\n\t        if (maxAge > 0) {\n\t          this.set(hit.k, hit.v, maxAge);\n\t        }\n\t      }\n\t    }\n\t  }\n\n\t  prune () {\n\t    this[CACHE].forEach((value, key) => get(this, key, false));\n\t  }\n\t}\n\n\tconst get = (self, key, doUse) => {\n\t  const node = self[CACHE].get(key);\n\t  if (node) {\n\t    const hit = node.value;\n\t    if (isStale(self, hit)) {\n\t      del(self, node);\n\t      if (!self[ALLOW_STALE])\n\t        return undefined\n\t    } else {\n\t      if (doUse) {\n\t        if (self[UPDATE_AGE_ON_GET])\n\t          node.value.now = Date.now();\n\t        self[LRU_LIST].unshiftNode(node);\n\t      }\n\t    }\n\t    return hit.value\n\t  }\n\t};\n\n\tconst isStale = (self, hit) => {\n\t  if (!hit || (!hit.maxAge && !self[MAX_AGE]))\n\t    return false\n\n\t  const diff = Date.now() - hit.now;\n\t  return hit.maxAge ? diff > hit.maxAge\n\t    : self[MAX_AGE] && (diff > self[MAX_AGE])\n\t};\n\n\tconst trim = self => {\n\t  if (self[LENGTH] > self[MAX]) {\n\t    for (let walker = self[LRU_LIST].tail;\n\t      self[LENGTH] > self[MAX] && walker !== null;) {\n\t      // We know that we're about to delete this one, and also\n\t      // what the next least recently used key will be, so just\n\t      // go ahead and set it now.\n\t      const prev = walker.prev;\n\t      del(self, walker);\n\t      walker = prev;\n\t    }\n\t  }\n\t};\n\n\tconst del = (self, node) => {\n\t  if (node) {\n\t    const hit = node.value;\n\t    if (self[DISPOSE])\n\t      self[DISPOSE](hit.key, hit.value);\n\n\t    self[LENGTH] -= hit.length;\n\t    self[CACHE].delete(hit.key);\n\t    self[LRU_LIST].removeNode(node);\n\t  }\n\t};\n\n\tclass Entry {\n\t  constructor (key, value, length, now, maxAge) {\n\t    this.key = key;\n\t    this.value = value;\n\t    this.length = length;\n\t    this.now = now;\n\t    this.maxAge = maxAge || 0;\n\t  }\n\t}\n\n\tconst forEachStep = (self, fn, node, thisp) => {\n\t  let hit = node.value;\n\t  if (isStale(self, hit)) {\n\t    del(self, node);\n\t    if (!self[ALLOW_STALE])\n\t      hit = undefined;\n\t  }\n\t  if (hit)\n\t    fn.call(thisp, hit.value, hit.key, self);\n\t};\n\n\tlruCache = LRUCache;\n\treturn lruCache;\n}\n\nvar range;\nvar hasRequiredRange;\n\nfunction requireRange () {\n\tif (hasRequiredRange) return range;\n\thasRequiredRange = 1;\n\t// hoisted class for cyclic dependency\n\tclass Range {\n\t  constructor (range, options) {\n\t    options = parseOptions(options);\n\n\t    if (range instanceof Range) {\n\t      if (\n\t        range.loose === !!options.loose &&\n\t        range.includePrerelease === !!options.includePrerelease\n\t      ) {\n\t        return range\n\t      } else {\n\t        return new Range(range.raw, options)\n\t      }\n\t    }\n\n\t    if (range instanceof Comparator) {\n\t      // just put it in the set and return\n\t      this.raw = range.value;\n\t      this.set = [[range]];\n\t      this.format();\n\t      return this\n\t    }\n\n\t    this.options = options;\n\t    this.loose = !!options.loose;\n\t    this.includePrerelease = !!options.includePrerelease;\n\n\t    // First, split based on boolean or ||\n\t    this.raw = range;\n\t    this.set = range\n\t      .split('||')\n\t      // map the range to a 2d array of comparators\n\t      .map(r => this.parseRange(r.trim()))\n\t      // throw out any comparator lists that are empty\n\t      // this generally means that it was not a valid range, which is allowed\n\t      // in loose mode, but will still throw if the WHOLE range is invalid.\n\t      .filter(c => c.length);\n\n\t    if (!this.set.length) {\n\t      throw new TypeError(`Invalid SemVer Range: ${range}`)\n\t    }\n\n\t    // if we have any that are not the null set, throw out null sets.\n\t    if (this.set.length > 1) {\n\t      // keep the first one, in case they're all null sets\n\t      const first = this.set[0];\n\t      this.set = this.set.filter(c => !isNullSet(c[0]));\n\t      if (this.set.length === 0) {\n\t        this.set = [first];\n\t      } else if (this.set.length > 1) {\n\t        // if we have any that are *, then the range is just *\n\t        for (const c of this.set) {\n\t          if (c.length === 1 && isAny(c[0])) {\n\t            this.set = [c];\n\t            break\n\t          }\n\t        }\n\t      }\n\t    }\n\n\t    this.format();\n\t  }\n\n\t  format () {\n\t    this.range = this.set\n\t      .map((comps) => {\n\t        return comps.join(' ').trim()\n\t      })\n\t      .join('||')\n\t      .trim();\n\t    return this.range\n\t  }\n\n\t  toString () {\n\t    return this.range\n\t  }\n\n\t  parseRange (range) {\n\t    range = range.trim();\n\n\t    // memoize range parsing for performance.\n\t    // this is a very hot path, and fully deterministic.\n\t    const memoOpts = Object.keys(this.options).join(',');\n\t    const memoKey = `parseRange:${memoOpts}:${range}`;\n\t    const cached = cache.get(memoKey);\n\t    if (cached) {\n\t      return cached\n\t    }\n\n\t    const loose = this.options.loose;\n\t    // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`\n\t    const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];\n\t    range = range.replace(hr, hyphenReplace(this.options.includePrerelease));\n\t    debug('hyphen replace', range);\n\t    // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`\n\t    range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace);\n\t    debug('comparator trim', range);\n\n\t    // `~ 1.2.3` => `~1.2.3`\n\t    range = range.replace(re[t.TILDETRIM], tildeTrimReplace);\n\n\t    // `^ 1.2.3` => `^1.2.3`\n\t    range = range.replace(re[t.CARETTRIM], caretTrimReplace);\n\n\t    // normalize spaces\n\t    range = range.split(/\\s+/).join(' ');\n\n\t    // At this point, the range is completely trimmed and\n\t    // ready to be split into comparators.\n\n\t    let rangeList = range\n\t      .split(' ')\n\t      .map(comp => parseComparator(comp, this.options))\n\t      .join(' ')\n\t      .split(/\\s+/)\n\t      // >=0.0.0 is equivalent to *\n\t      .map(comp => replaceGTE0(comp, this.options));\n\n\t    if (loose) {\n\t      // in loose mode, throw out any that are not valid comparators\n\t      rangeList = rangeList.filter(comp => {\n\t        debug('loose invalid filter', comp, this.options);\n\t        return !!comp.match(re[t.COMPARATORLOOSE])\n\t      });\n\t    }\n\t    debug('range list', rangeList);\n\n\t    // if any comparators are the null set, then replace with JUST null set\n\t    // if more than one comparator, remove any * comparators\n\t    // also, don't include the same comparator more than once\n\t    const rangeMap = new Map();\n\t    const comparators = rangeList.map(comp => new Comparator(comp, this.options));\n\t    for (const comp of comparators) {\n\t      if (isNullSet(comp)) {\n\t        return [comp]\n\t      }\n\t      rangeMap.set(comp.value, comp);\n\t    }\n\t    if (rangeMap.size > 1 && rangeMap.has('')) {\n\t      rangeMap.delete('');\n\t    }\n\n\t    const result = [...rangeMap.values()];\n\t    cache.set(memoKey, result);\n\t    return result\n\t  }\n\n\t  intersects (range, options) {\n\t    if (!(range instanceof Range)) {\n\t      throw new TypeError('a Range is required')\n\t    }\n\n\t    return this.set.some((thisComparators) => {\n\t      return (\n\t        isSatisfiable(thisComparators, options) &&\n\t        range.set.some((rangeComparators) => {\n\t          return (\n\t            isSatisfiable(rangeComparators, options) &&\n\t            thisComparators.every((thisComparator) => {\n\t              return rangeComparators.every((rangeComparator) => {\n\t                return thisComparator.intersects(rangeComparator, options)\n\t              })\n\t            })\n\t          )\n\t        })\n\t      )\n\t    })\n\t  }\n\n\t  // if ANY of the sets match ALL of its comparators, then pass\n\t  test (version) {\n\t    if (!version) {\n\t      return false\n\t    }\n\n\t    if (typeof version === 'string') {\n\t      try {\n\t        version = new SemVer(version, this.options);\n\t      } catch (er) {\n\t        return false\n\t      }\n\t    }\n\n\t    for (let i = 0; i < this.set.length; i++) {\n\t      if (testSet(this.set[i], version, this.options)) {\n\t        return true\n\t      }\n\t    }\n\t    return false\n\t  }\n\t}\n\trange = Range;\n\n\tconst LRU = requireLruCache();\n\tconst cache = new LRU({ max: 1000 });\n\n\tconst parseOptions = parseOptions_1;\n\tconst Comparator = requireComparator();\n\tconst debug = debug_1;\n\tconst SemVer = semver$2;\n\tconst {\n\t  re,\n\t  t,\n\t  comparatorTrimReplace,\n\t  tildeTrimReplace,\n\t  caretTrimReplace,\n\t} = re$3.exports;\n\n\tconst isNullSet = c => c.value === '<0.0.0-0';\n\tconst isAny = c => c.value === '';\n\n\t// take a set of comparators and determine whether there\n\t// exists a version which can satisfy it\n\tconst isSatisfiable = (comparators, options) => {\n\t  let result = true;\n\t  const remainingComparators = comparators.slice();\n\t  let testComparator = remainingComparators.pop();\n\n\t  while (result && remainingComparators.length) {\n\t    result = remainingComparators.every((otherComparator) => {\n\t      return testComparator.intersects(otherComparator, options)\n\t    });\n\n\t    testComparator = remainingComparators.pop();\n\t  }\n\n\t  return result\n\t};\n\n\t// comprised of xranges, tildes, stars, and gtlt's at this point.\n\t// already replaced the hyphen ranges\n\t// turn into a set of JUST comparators.\n\tconst parseComparator = (comp, options) => {\n\t  debug('comp', comp, options);\n\t  comp = replaceCarets(comp, options);\n\t  debug('caret', comp);\n\t  comp = replaceTildes(comp, options);\n\t  debug('tildes', comp);\n\t  comp = replaceXRanges(comp, options);\n\t  debug('xrange', comp);\n\t  comp = replaceStars(comp, options);\n\t  debug('stars', comp);\n\t  return comp\n\t};\n\n\tconst isX = id => !id || id.toLowerCase() === 'x' || id === '*';\n\n\t// ~, ~> --> * (any, kinda silly)\n\t// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0-0\n\t// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0-0\n\t// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0-0\n\t// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0-0\n\t// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0-0\n\tconst replaceTildes = (comp, options) =>\n\t  comp.trim().split(/\\s+/).map((c) => {\n\t    return replaceTilde(c, options)\n\t  }).join(' ');\n\n\tconst replaceTilde = (comp, options) => {\n\t  const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE];\n\t  return comp.replace(r, (_, M, m, p, pr) => {\n\t    debug('tilde', comp, _, M, m, p, pr);\n\t    let ret;\n\n\t    if (isX(M)) {\n\t      ret = '';\n\t    } else if (isX(m)) {\n\t      ret = `>=${M}.0.0 <${+M + 1}.0.0-0`;\n\t    } else if (isX(p)) {\n\t      // ~1.2 == >=1.2.0 <1.3.0-0\n\t      ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`;\n\t    } else if (pr) {\n\t      debug('replaceTilde pr', pr);\n\t      ret = `>=${M}.${m}.${p}-${pr\n\t      } <${M}.${+m + 1}.0-0`;\n\t    } else {\n\t      // ~1.2.3 == >=1.2.3 <1.3.0-0\n\t      ret = `>=${M}.${m}.${p\n\t      } <${M}.${+m + 1}.0-0`;\n\t    }\n\n\t    debug('tilde return', ret);\n\t    return ret\n\t  })\n\t};\n\n\t// ^ --> * (any, kinda silly)\n\t// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0-0\n\t// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0-0\n\t// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0-0\n\t// ^1.2.3 --> >=1.2.3 <2.0.0-0\n\t// ^1.2.0 --> >=1.2.0 <2.0.0-0\n\tconst replaceCarets = (comp, options) =>\n\t  comp.trim().split(/\\s+/).map((c) => {\n\t    return replaceCaret(c, options)\n\t  }).join(' ');\n\n\tconst replaceCaret = (comp, options) => {\n\t  debug('caret', comp, options);\n\t  const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET];\n\t  const z = options.includePrerelease ? '-0' : '';\n\t  return comp.replace(r, (_, M, m, p, pr) => {\n\t    debug('caret', comp, _, M, m, p, pr);\n\t    let ret;\n\n\t    if (isX(M)) {\n\t      ret = '';\n\t    } else if (isX(m)) {\n\t      ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`;\n\t    } else if (isX(p)) {\n\t      if (M === '0') {\n\t        ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`;\n\t      } else {\n\t        ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`;\n\t      }\n\t    } else if (pr) {\n\t      debug('replaceCaret pr', pr);\n\t      if (M === '0') {\n\t        if (m === '0') {\n\t          ret = `>=${M}.${m}.${p}-${pr\n\t          } <${M}.${m}.${+p + 1}-0`;\n\t        } else {\n\t          ret = `>=${M}.${m}.${p}-${pr\n\t          } <${M}.${+m + 1}.0-0`;\n\t        }\n\t      } else {\n\t        ret = `>=${M}.${m}.${p}-${pr\n\t        } <${+M + 1}.0.0-0`;\n\t      }\n\t    } else {\n\t      debug('no pr');\n\t      if (M === '0') {\n\t        if (m === '0') {\n\t          ret = `>=${M}.${m}.${p\n\t          }${z} <${M}.${m}.${+p + 1}-0`;\n\t        } else {\n\t          ret = `>=${M}.${m}.${p\n\t          }${z} <${M}.${+m + 1}.0-0`;\n\t        }\n\t      } else {\n\t        ret = `>=${M}.${m}.${p\n\t        } <${+M + 1}.0.0-0`;\n\t      }\n\t    }\n\n\t    debug('caret return', ret);\n\t    return ret\n\t  })\n\t};\n\n\tconst replaceXRanges = (comp, options) => {\n\t  debug('replaceXRanges', comp, options);\n\t  return comp.split(/\\s+/).map((c) => {\n\t    return replaceXRange(c, options)\n\t  }).join(' ')\n\t};\n\n\tconst replaceXRange = (comp, options) => {\n\t  comp = comp.trim();\n\t  const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];\n\t  return comp.replace(r, (ret, gtlt, M, m, p, pr) => {\n\t    debug('xRange', comp, ret, gtlt, M, m, p, pr);\n\t    const xM = isX(M);\n\t    const xm = xM || isX(m);\n\t    const xp = xm || isX(p);\n\t    const anyX = xp;\n\n\t    if (gtlt === '=' && anyX) {\n\t      gtlt = '';\n\t    }\n\n\t    // if we're including prereleases in the match, then we need\n\t    // to fix this to -0, the lowest possible prerelease value\n\t    pr = options.includePrerelease ? '-0' : '';\n\n\t    if (xM) {\n\t      if (gtlt === '>' || gtlt === '<') {\n\t        // nothing is allowed\n\t        ret = '<0.0.0-0';\n\t      } else {\n\t        // nothing is forbidden\n\t        ret = '*';\n\t      }\n\t    } else if (gtlt && anyX) {\n\t      // we know patch is an x, because we have any x at all.\n\t      // replace X with 0\n\t      if (xm) {\n\t        m = 0;\n\t      }\n\t      p = 0;\n\n\t      if (gtlt === '>') {\n\t        // >1 => >=2.0.0\n\t        // >1.2 => >=1.3.0\n\t        gtlt = '>=';\n\t        if (xm) {\n\t          M = +M + 1;\n\t          m = 0;\n\t          p = 0;\n\t        } else {\n\t          m = +m + 1;\n\t          p = 0;\n\t        }\n\t      } else if (gtlt === '<=') {\n\t        // <=0.7.x is actually <0.8.0, since any 0.7.x should\n\t        // pass.  Similarly, <=7.x is actually <8.0.0, etc.\n\t        gtlt = '<';\n\t        if (xm) {\n\t          M = +M + 1;\n\t        } else {\n\t          m = +m + 1;\n\t        }\n\t      }\n\n\t      if (gtlt === '<') {\n\t        pr = '-0';\n\t      }\n\n\t      ret = `${gtlt + M}.${m}.${p}${pr}`;\n\t    } else if (xm) {\n\t      ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`;\n\t    } else if (xp) {\n\t      ret = `>=${M}.${m}.0${pr\n\t      } <${M}.${+m + 1}.0-0`;\n\t    }\n\n\t    debug('xRange return', ret);\n\n\t    return ret\n\t  })\n\t};\n\n\t// Because * is AND-ed with everything else in the comparator,\n\t// and '' means \"any version\", just remove the *s entirely.\n\tconst replaceStars = (comp, options) => {\n\t  debug('replaceStars', comp, options);\n\t  // Looseness is ignored here.  star is always as loose as it gets!\n\t  return comp.trim().replace(re[t.STAR], '')\n\t};\n\n\tconst replaceGTE0 = (comp, options) => {\n\t  debug('replaceGTE0', comp, options);\n\t  return comp.trim()\n\t    .replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], '')\n\t};\n\n\t// This function is passed to string.replace(re[t.HYPHENRANGE])\n\t// M, m, patch, prerelease, build\n\t// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5\n\t// 1.2.3 - 3.4 => >=1.2.0 <3.5.0-0 Any 3.4.x will do\n\t// 1.2 - 3.4 => >=1.2.0 <3.5.0-0\n\tconst hyphenReplace = incPr => ($0,\n\t  from, fM, fm, fp, fpr, fb,\n\t  to, tM, tm, tp, tpr, tb) => {\n\t  if (isX(fM)) {\n\t    from = '';\n\t  } else if (isX(fm)) {\n\t    from = `>=${fM}.0.0${incPr ? '-0' : ''}`;\n\t  } else if (isX(fp)) {\n\t    from = `>=${fM}.${fm}.0${incPr ? '-0' : ''}`;\n\t  } else if (fpr) {\n\t    from = `>=${from}`;\n\t  } else {\n\t    from = `>=${from}${incPr ? '-0' : ''}`;\n\t  }\n\n\t  if (isX(tM)) {\n\t    to = '';\n\t  } else if (isX(tm)) {\n\t    to = `<${+tM + 1}.0.0-0`;\n\t  } else if (isX(tp)) {\n\t    to = `<${tM}.${+tm + 1}.0-0`;\n\t  } else if (tpr) {\n\t    to = `<=${tM}.${tm}.${tp}-${tpr}`;\n\t  } else if (incPr) {\n\t    to = `<${tM}.${tm}.${+tp + 1}-0`;\n\t  } else {\n\t    to = `<=${to}`;\n\t  }\n\n\t  return (`${from} ${to}`).trim()\n\t};\n\n\tconst testSet = (set, version, options) => {\n\t  for (let i = 0; i < set.length; i++) {\n\t    if (!set[i].test(version)) {\n\t      return false\n\t    }\n\t  }\n\n\t  if (version.prerelease.length && !options.includePrerelease) {\n\t    // Find the set of versions that are allowed to have prereleases\n\t    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0\n\t    // That should allow `1.2.3-pr.2` to pass.\n\t    // However, `1.2.4-alpha.notready` should NOT be allowed,\n\t    // even though it's within the range set by the comparators.\n\t    for (let i = 0; i < set.length; i++) {\n\t      debug(set[i].semver);\n\t      if (set[i].semver === Comparator.ANY) {\n\t        continue\n\t      }\n\n\t      if (set[i].semver.prerelease.length > 0) {\n\t        const allowed = set[i].semver;\n\t        if (allowed.major === version.major &&\n\t            allowed.minor === version.minor &&\n\t            allowed.patch === version.patch) {\n\t          return true\n\t        }\n\t      }\n\t    }\n\n\t    // Version has a -pre, but it's not one of the ones we like.\n\t    return false\n\t  }\n\n\t  return true\n\t};\n\treturn range;\n}\n\nvar comparator;\nvar hasRequiredComparator;\n\nfunction requireComparator () {\n\tif (hasRequiredComparator) return comparator;\n\thasRequiredComparator = 1;\n\tconst ANY = Symbol('SemVer ANY');\n\t// hoisted class for cyclic dependency\n\tclass Comparator {\n\t  static get ANY () {\n\t    return ANY\n\t  }\n\n\t  constructor (comp, options) {\n\t    options = parseOptions(options);\n\n\t    if (comp instanceof Comparator) {\n\t      if (comp.loose === !!options.loose) {\n\t        return comp\n\t      } else {\n\t        comp = comp.value;\n\t      }\n\t    }\n\n\t    debug('comparator', comp, options);\n\t    this.options = options;\n\t    this.loose = !!options.loose;\n\t    this.parse(comp);\n\n\t    if (this.semver === ANY) {\n\t      this.value = '';\n\t    } else {\n\t      this.value = this.operator + this.semver.version;\n\t    }\n\n\t    debug('comp', this);\n\t  }\n\n\t  parse (comp) {\n\t    const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];\n\t    const m = comp.match(r);\n\n\t    if (!m) {\n\t      throw new TypeError(`Invalid comparator: ${comp}`)\n\t    }\n\n\t    this.operator = m[1] !== undefined ? m[1] : '';\n\t    if (this.operator === '=') {\n\t      this.operator = '';\n\t    }\n\n\t    // if it literally is just '>' or '' then allow anything.\n\t    if (!m[2]) {\n\t      this.semver = ANY;\n\t    } else {\n\t      this.semver = new SemVer(m[2], this.options.loose);\n\t    }\n\t  }\n\n\t  toString () {\n\t    return this.value\n\t  }\n\n\t  test (version) {\n\t    debug('Comparator.test', version, this.options.loose);\n\n\t    if (this.semver === ANY || version === ANY) {\n\t      return true\n\t    }\n\n\t    if (typeof version === 'string') {\n\t      try {\n\t        version = new SemVer(version, this.options);\n\t      } catch (er) {\n\t        return false\n\t      }\n\t    }\n\n\t    return cmp(version, this.operator, this.semver, this.options)\n\t  }\n\n\t  intersects (comp, options) {\n\t    if (!(comp instanceof Comparator)) {\n\t      throw new TypeError('a Comparator is required')\n\t    }\n\n\t    if (!options || typeof options !== 'object') {\n\t      options = {\n\t        loose: !!options,\n\t        includePrerelease: false,\n\t      };\n\t    }\n\n\t    if (this.operator === '') {\n\t      if (this.value === '') {\n\t        return true\n\t      }\n\t      return new Range(comp.value, options).test(this.value)\n\t    } else if (comp.operator === '') {\n\t      if (comp.value === '') {\n\t        return true\n\t      }\n\t      return new Range(this.value, options).test(comp.semver)\n\t    }\n\n\t    const sameDirectionIncreasing =\n\t      (this.operator === '>=' || this.operator === '>') &&\n\t      (comp.operator === '>=' || comp.operator === '>');\n\t    const sameDirectionDecreasing =\n\t      (this.operator === '<=' || this.operator === '<') &&\n\t      (comp.operator === '<=' || comp.operator === '<');\n\t    const sameSemVer = this.semver.version === comp.semver.version;\n\t    const differentDirectionsInclusive =\n\t      (this.operator === '>=' || this.operator === '<=') &&\n\t      (comp.operator === '>=' || comp.operator === '<=');\n\t    const oppositeDirectionsLessThan =\n\t      cmp(this.semver, '<', comp.semver, options) &&\n\t      (this.operator === '>=' || this.operator === '>') &&\n\t        (comp.operator === '<=' || comp.operator === '<');\n\t    const oppositeDirectionsGreaterThan =\n\t      cmp(this.semver, '>', comp.semver, options) &&\n\t      (this.operator === '<=' || this.operator === '<') &&\n\t        (comp.operator === '>=' || comp.operator === '>');\n\n\t    return (\n\t      sameDirectionIncreasing ||\n\t      sameDirectionDecreasing ||\n\t      (sameSemVer && differentDirectionsInclusive) ||\n\t      oppositeDirectionsLessThan ||\n\t      oppositeDirectionsGreaterThan\n\t    )\n\t  }\n\t}\n\n\tcomparator = Comparator;\n\n\tconst parseOptions = parseOptions_1;\n\tconst { re, t } = re$3.exports;\n\tconst cmp = cmp_1;\n\tconst debug = debug_1;\n\tconst SemVer = semver$2;\n\tconst Range = requireRange();\n\treturn comparator;\n}\n\nconst Range$8 = requireRange();\nconst satisfies$3 = (version, range, options) => {\n  try {\n    range = new Range$8(range, options);\n  } catch (er) {\n    return false\n  }\n  return range.test(version)\n};\nvar satisfies_1 = satisfies$3;\n\nconst Range$7 = requireRange();\n\n// Mostly just for testing and legacy API reasons\nconst toComparators = (range, options) =>\n  new Range$7(range, options).set\n    .map(comp => comp.map(c => c.value).join(' ').trim().split(' '));\n\nvar toComparators_1 = toComparators;\n\nconst SemVer$3 = semver$2;\nconst Range$6 = requireRange();\n\nconst maxSatisfying = (versions, range, options) => {\n  let max = null;\n  let maxSV = null;\n  let rangeObj = null;\n  try {\n    rangeObj = new Range$6(range, options);\n  } catch (er) {\n    return null\n  }\n  versions.forEach((v) => {\n    if (rangeObj.test(v)) {\n      // satisfies(v, range, options)\n      if (!max || maxSV.compare(v) === -1) {\n        // compare(max, v, true)\n        max = v;\n        maxSV = new SemVer$3(max, options);\n      }\n    }\n  });\n  return max\n};\nvar maxSatisfying_1 = maxSatisfying;\n\nconst SemVer$2 = semver$2;\nconst Range$5 = requireRange();\nconst minSatisfying = (versions, range, options) => {\n  let min = null;\n  let minSV = null;\n  let rangeObj = null;\n  try {\n    rangeObj = new Range$5(range, options);\n  } catch (er) {\n    return null\n  }\n  versions.forEach((v) => {\n    if (rangeObj.test(v)) {\n      // satisfies(v, range, options)\n      if (!min || minSV.compare(v) === 1) {\n        // compare(min, v, true)\n        min = v;\n        minSV = new SemVer$2(min, options);\n      }\n    }\n  });\n  return min\n};\nvar minSatisfying_1 = minSatisfying;\n\nconst SemVer$1 = semver$2;\nconst Range$4 = requireRange();\nconst gt$1 = gt_1;\n\nconst minVersion = (range, loose) => {\n  range = new Range$4(range, loose);\n\n  let minver = new SemVer$1('0.0.0');\n  if (range.test(minver)) {\n    return minver\n  }\n\n  minver = new SemVer$1('0.0.0-0');\n  if (range.test(minver)) {\n    return minver\n  }\n\n  minver = null;\n  for (let i = 0; i < range.set.length; ++i) {\n    const comparators = range.set[i];\n\n    let setMin = null;\n    comparators.forEach((comparator) => {\n      // Clone to avoid manipulating the comparator's semver object.\n      const compver = new SemVer$1(comparator.semver.version);\n      switch (comparator.operator) {\n        case '>':\n          if (compver.prerelease.length === 0) {\n            compver.patch++;\n          } else {\n            compver.prerelease.push(0);\n          }\n          compver.raw = compver.format();\n          /* fallthrough */\n        case '':\n        case '>=':\n          if (!setMin || gt$1(compver, setMin)) {\n            setMin = compver;\n          }\n          break\n        case '<':\n        case '<=':\n          /* Ignore maximum versions */\n          break\n        /* istanbul ignore next */\n        default:\n          throw new Error(`Unexpected operation: ${comparator.operator}`)\n      }\n    });\n    if (setMin && (!minver || gt$1(minver, setMin))) {\n      minver = setMin;\n    }\n  }\n\n  if (minver && range.test(minver)) {\n    return minver\n  }\n\n  return null\n};\nvar minVersion_1 = minVersion;\n\nconst Range$3 = requireRange();\nconst validRange = (range, options) => {\n  try {\n    // Return '*' instead of '' so that truthiness works.\n    // This will throw if it's invalid anyway\n    return new Range$3(range, options).range || '*'\n  } catch (er) {\n    return null\n  }\n};\nvar valid = validRange;\n\nconst SemVer = semver$2;\nconst Comparator$1 = requireComparator();\nconst { ANY: ANY$1 } = Comparator$1;\nconst Range$2 = requireRange();\nconst satisfies$2 = satisfies_1;\nconst gt = gt_1;\nconst lt = lt_1;\nconst lte = lte_1;\nconst gte = gte_1;\n\nconst outside$2 = (version, range, hilo, options) => {\n  version = new SemVer(version, options);\n  range = new Range$2(range, options);\n\n  let gtfn, ltefn, ltfn, comp, ecomp;\n  switch (hilo) {\n    case '>':\n      gtfn = gt;\n      ltefn = lte;\n      ltfn = lt;\n      comp = '>';\n      ecomp = '>=';\n      break\n    case '<':\n      gtfn = lt;\n      ltefn = gte;\n      ltfn = gt;\n      comp = '<';\n      ecomp = '<=';\n      break\n    default:\n      throw new TypeError('Must provide a hilo val of \"<\" or \">\"')\n  }\n\n  // If it satisfies the range it is not outside\n  if (satisfies$2(version, range, options)) {\n    return false\n  }\n\n  // From now on, variable terms are as if we're in \"gtr\" mode.\n  // but note that everything is flipped for the \"ltr\" function.\n\n  for (let i = 0; i < range.set.length; ++i) {\n    const comparators = range.set[i];\n\n    let high = null;\n    let low = null;\n\n    comparators.forEach((comparator) => {\n      if (comparator.semver === ANY$1) {\n        comparator = new Comparator$1('>=0.0.0');\n      }\n      high = high || comparator;\n      low = low || comparator;\n      if (gtfn(comparator.semver, high.semver, options)) {\n        high = comparator;\n      } else if (ltfn(comparator.semver, low.semver, options)) {\n        low = comparator;\n      }\n    });\n\n    // If the edge version comparator has a operator then our version\n    // isn't outside it\n    if (high.operator === comp || high.operator === ecomp) {\n      return false\n    }\n\n    // If the lowest version comparator has an operator and our version\n    // is less than it then it isn't higher than the range\n    if ((!low.operator || low.operator === comp) &&\n        ltefn(version, low.semver)) {\n      return false\n    } else if (low.operator === ecomp && ltfn(version, low.semver)) {\n      return false\n    }\n  }\n  return true\n};\n\nvar outside_1 = outside$2;\n\n// Determine if version is greater than all the versions possible in the range.\nconst outside$1 = outside_1;\nconst gtr = (version, range, options) => outside$1(version, range, '>', options);\nvar gtr_1 = gtr;\n\nconst outside = outside_1;\n// Determine if version is less than all the versions possible in the range\nconst ltr = (version, range, options) => outside(version, range, '<', options);\nvar ltr_1 = ltr;\n\nconst Range$1 = requireRange();\nconst intersects = (r1, r2, options) => {\n  r1 = new Range$1(r1, options);\n  r2 = new Range$1(r2, options);\n  return r1.intersects(r2)\n};\nvar intersects_1 = intersects;\n\n// given a set of versions and a range, create a \"simplified\" range\n// that includes the same versions that the original range does\n// If the original range is shorter than the simplified one, return that.\nconst satisfies$1 = satisfies_1;\nconst compare$1 = compare_1;\nvar simplify = (versions, range, options) => {\n  const set = [];\n  let first = null;\n  let prev = null;\n  const v = versions.sort((a, b) => compare$1(a, b, options));\n  for (const version of v) {\n    const included = satisfies$1(version, range, options);\n    if (included) {\n      prev = version;\n      if (!first) {\n        first = version;\n      }\n    } else {\n      if (prev) {\n        set.push([first, prev]);\n      }\n      prev = null;\n      first = null;\n    }\n  }\n  if (first) {\n    set.push([first, null]);\n  }\n\n  const ranges = [];\n  for (const [min, max] of set) {\n    if (min === max) {\n      ranges.push(min);\n    } else if (!max && min === v[0]) {\n      ranges.push(